{
	"info": {
		"_postman_id": "1ddd82af-d374-482a-9cf1-cbaa6ef2b719",
		"name": "HW_Postman_02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token =jsonData.token;\r",
							"\r",
							"console.log('TOKEN =' + resp_token);\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"\r",
							"var response = pm.response.code         // установить переменную для проверки кода ответа\r",
							"console.log (\"Status code is \" + response)  //вывод результата в консоль\r",
							"\r",
							"//проверка правильности ответа от сервера\r",
							"\r",
							"pm.test\r",
							"    (\"Check the type of response\", function () \r",
							"        {\r",
							"        var response_server = pm.response.text()  // переменная для вывода информации в консоль\r",
							"        pm.expect(pm.response.text()); // проверить что приходит строка,а  не json\r",
							"        pm.response.to.have.body(\"This is the first responce from server!\"); // проверить что ответ содержит введенный текст\r",
							"        console.log(\"Server returns follow response  \" + \"'\" + response_server +\"'\")\r",
							"        \r",
							"        }\r",
							"    );"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"var responseData = pm.response.json(); // спарсить ответ от сервера в json \r",
							"var response = pm.response.code         // установить переменную для проверки кода ответа\r",
							"console.log (\"Status code is \" + response)  //вывод результата в консоль\r",
							"\r",
							"var name = responseData.name\r",
							"var age = +responseData.age //перевод типа string в int\r",
							"var salary = responseData.salary\r",
							"\r",
							"//проверка типов даных значений, полученных в ответе\r",
							"console.log(\"Name is \" + name + \" \" +typeof(name))\r",
							"console.log(\"age \" + age + \" \" +typeof(age))\r",
							"console.log (\"Salary is \" + salary +\" \" + typeof(salary))\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"\r",
							"pm.test(\"Check the answer from server\", () => \r",
							"{\r",
							"  pm.expect(name).to.eql(\"Vasia\");\r",
							"  console.log(\"Response returns name \" + name)\r",
							"  pm.expect(age).to.eql(30);\r",
							"  console.log(\"Response returns age \" + age)\r",
							"  pm.expect(salary).to.eql(2000);\r",
							"  console.log(\"Response returns salary \" + salary)\r",
							"  console.log(\"Test is complited\")\r",
							"});\r",
							" \r",
							"// 7.Спарсить request.\r",
							"var req = request.data; // спарсить запрос\r",
							"var req_name = request.data.name\r",
							"console.log(\"CHECK of request's fields  \" + req_name) //вывести поле из запроса в консоль\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.\r",
							"\r",
							"console.log(name + ' ' + typeof(name))\r",
							"console.log(req_name + ' ' + typeof(req_name))\r",
							"\r",
							"pm.test(\"Compare name-fields in response and request \", () => {\r",
							"pm.expect(req_name).to.eql(name);\r",
							"console.log (req_name + \" is equal with \" + name)\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"var req_age = +request.data.age\r",
							"\r",
							"console.log('Age in response type' + ' ' + typeof(age))\r",
							"console.log('Age in request has type' + ' ' + typeof(req_age))\r",
							"\r",
							"pm.test(\"Compare age-fields in response and request \", () => {\r",
							"pm.expect(req_age).to.eql(age);\r",
							"console.log (req_age + \" is equal with \" + age)\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"var req_salary = +request.data.salary\r",
							"\r",
							"console.log('salary in response type' + ' ' + typeof(salary))\r",
							"console.log('salary in request has type' + ' ' + typeof(req_salary))\r",
							"\r",
							"pm.test(\"Compare salary-fields in response and request \", () => {\r",
							"pm.expect(req_salary).to.eql(salary);\r",
							"console.log (req_salary + \" is equal with \" + salary)\r",
							"});\r",
							"\r",
							"//11.Вывести в консоль параметр family из response.\r",
							"\r",
							"var response_family = responseData.family         // установить переменную для вывода параметра семья\r",
							"console.log(\"family =\", response_family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"var new_salary = responseData.family.u_salary_1_5_year\r",
							"\r",
							"console.log(\"amount of salary in response is \" + salary)\r",
							"console.log(\"amount of salary in request is \" + req_salary)\r",
							"console.log(\"amount of salary in 4 years is \" + new_salary)\r",
							"console.log('salary in response has type' + ' ' + typeof(new_salary))\r",
							"\r",
							"pm.test(\"Compare salary-fields in response and request \", () => {\r",
							"pm.expect(new_salary).to.eql(req_salary*4);\r",
							"console.log (\"salary in 4 years will be \" + new_salary)\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vasia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"    console.log(pm.response.code)\r",
							"\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"var response_Data = pm.response.json() \r",
							"console.log(\"RESPONSE_DATA \",response_Data)\r",
							"var resp_name = response_Data.name\r",
							"var resp_age = +response_Data.age\r",
							"var resp_salary = response_Data.salary\r",
							"var resp_family = response_Data.family\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req_data = request.data; // спарсить запрос\r",
							"var get_params = pm.request.url.query.toObject() // спарсить запрос\r",
							"//console.log(\"CHECK request form = \", get_params)\r",
							"\r",
							"var reques_name = get_params.name\r",
							"var reques_age = get_params.age\r",
							"var reques_salary = +get_params.salary\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"console.log(resp_name + ' ' + typeof(resp_name))\r",
							"console.log(reques_name + ' ' + typeof(reques_name))\r",
							"\r",
							"pm.test(\"Compare name-fields in response and request \", () => {\r",
							"pm.expect(reques_name).to.eql(resp_name);\r",
							"console.log (reques_name + \" is equal to \" + resp_name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"var reques_age = +get_params.age\r",
							"\r",
							"console.log(resp_age + ' ' + typeof(resp_age))\r",
							"console.log(reques_age + ' ' + typeof(reques_age))\r",
							"\r",
							"pm.test(\"Compare age-fields in response and request \", () => {\r",
							"pm.expect(reques_age).to.eql(resp_age);\r",
							"console.log (reques_age + \" is equal to \" + resp_age)\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"var reques_salary = +get_params.salary\r",
							"\r",
							"console.log(resp_age + ' ' + typeof(resp_age))\r",
							"console.log(reques_age + ' ' + typeof(reques_age))\r",
							"\r",
							"pm.test(\"Compare age-fields in response and request \", () => {\r",
							"pm.expect(reques_salary).to.eql(resp_salary);\r",
							"console.log (reques_salary + \" is equal to \" + resp_salary)\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(\"FAMILY = \", resp_family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"var dog = resp_family.pets.dog\r",
							"console.log(\"DOG = \",dog)\r",
							"\r",
							"pm.test(\"Parameter dog contains parameter name \", () => {\r",
							"pm.expect(dog).to.have.property(\"name\")\r",
							"console.log(\"Parameter dog contains parameter name \")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Parameter dog contains parameter age \", () => {\r",
							"pm.expect(dog).to.have.property(\"age\")\r",
							"console.log(\"Parameter dog contains parameter age \")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog has name \", () => {\r",
							"pm.expect(dog.name).to.eql(\"Luky\")\r",
							"console.log (\"Dog's name is \" + dog.name)\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Dog is \" + dog.age +\"years old\", () => {\r",
							"pm.expect(dog.age).to.eql(4)\r",
							"console.log (\"Dog's is \" + dog.age + \" old\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Mike&age=25&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mike"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"    console.log(pm.response.code)\r",
							"\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var responseData = pm.response.json() // спарсить ответ от сервера в json \r",
							"var resp_name = responseData.name\r",
							"var resp_age = responseData.age\r",
							"var resp_salary = responseData.salary\r",
							"\r",
							"console.log(\"CHECK response name \" + resp_name) // проверить правильность парсинга\r",
							"console.log(responseData)\r",
							"\r",
							"//4. Спарсить request\r",
							"\r",
							"var get_params = pm.request.url.query.toObject() // спарсить запрос\r",
							"//console.log(\"CHECK request form = \", get_params)\r",
							"\r",
							"var reques_name = get_params.name\r",
							"var reques_age = get_params.age\r",
							"var reques_salary = +get_params.salary\r",
							"\r",
							" //5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"console.log(resp_name + ' ' + typeof(resp_name))\r",
							"console.log(reques_name + ' ' + typeof(reques_name))\r",
							"\r",
							"pm.test(\"Compare name-fields in response and request \", () => {\r",
							"pm.expect(reques_name).to.eql(resp_name);\r",
							"console.log (reques_name + \" is equal to \" + resp_name)\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var reques_age = +get_params.age\r",
							"\r",
							"console.log(resp_age + ' ' + typeof(resp_age))\r",
							"console.log(reques_age + ' ' + typeof(reques_age))\r",
							"\r",
							"pm.test(\"Compare age-fields in response and request \", () => {\r",
							"pm.expect(reques_age).to.eql(resp_age);\r",
							"console.log (reques_age + \" is equal to \" + resp_age)\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(\"SALARY in request = \", reques_salary)\r",
							"\r",
							"// //8. Вывести в консоль параметр salary из response.\r",
							"\r",
							" console.log(\"SALARY in response = \", resp_salary + typeof(resp_salary))\r",
							"\r",
							"// //9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(\"SALARY_0 in response = \", resp_salary[0] +typeof(resp_salary[0]))\r",
							"\r",
							"// //10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"SALARY_1 in response = \", resp_salary[1]+typeof(resp_salary[1]))\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"SALARY_2 in response = \", resp_salary[2])\r",
							"\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"console.log('Type of salary in request ' + reques_salary + ' is  '+ typeof(reques_salary))\r",
							"console.log('Type of salary in response ' + resp_salary[0] + ' is ' + typeof(resp_salary[0]))\r",
							"\r",
							"pm.test(\"Compare salary-fields in response and request \", () => {\r",
							"pm.expect(resp_salary[0]).to.eql(reques_salary);\r",
							"console.log (resp_salary[0] + \" is equal to \" + reques_salary)\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"var resp_salary_1 = +resp_salary[1] //конвертация типа string в number\r",
							"console.log(\"SALARY_1 in response = \", resp_salary_1 + \" \" + typeof(resp_salary_1))\r",
							"\r",
							"pm.test(\"Compare salary-fields in response and request \", () => {\r",
							"pm.expect(resp_salary_1).to.eql(reques_salary*2);\r",
							"console.log (resp_salary_1 + \" is equal with \" + reques_salary*2)\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var resp_salary_2 = +resp_salary[2] //конвертация типа string в number\r",
							"console.log(\"SALARY_2 in response = \", resp_salary_2 + \" \" + typeof(resp_salary_2))\r",
							"\r",
							"pm.test(\"Compare salary-fields in response and request \", () => {\r",
							"pm.expect(resp_salary_2).to.eql(reques_salary*3);\r",
							"console.log (resp_salary_2 + \" is equal with \" + reques_salary*3)\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"\r",
							"pm.environment.set(\"name_variable\"); //создать переменную\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"\r",
							"pm.environment.set(\"age_variable\", resp_age); // создать переменную и сразу передать в нее значение\r",
							"\r",
							"//pm.environment.unset(\"age\"); //удаление переменной окружения\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"pm.environment.set (\"salary_variable\",resp_salary[0]) // создать переменную и сразу передать в нее значение\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name_variable\", resp_name);// передать значение из ответа в переменную \r",
							"\r",
							"//19. Передать в окружение переменную age  -  реализовано в 16 и 18\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"console.log(resp_salary)\r",
							"\r",
							"resp_salary.forEach((element, index) =>\r",
							"{\r",
							"console.log(element)\r",
							"}\r",
							");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Nastya&age=36&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nastya"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"console.log(pm.response.code)\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var response_Data = pm.response.json() \r",
							"console.log(\"RESPONSE_DATA \",response_Data)\r",
							"var resp_salary_15 = response_Data[\"qa_salary_after_1.5_year\"]\r",
							"console.log(\"RESPONSE_DATA in 1,5 YEAR\", resp_salary_15)\r",
							"var resp_salary_35 = response_Data[\"qa_salary_after_3.5_years\"]\r",
							"console.log(\"RESPONSE_DATA in 3,5 YEAR\", resp_salary_15)\r",
							"// var age = +response_Data.age\r",
							"//7. Спарсить request.\r",
							"var req_data = request.data; // спарсить запрос\r",
							"var req_start_salary = +request.data.salary // переменная для свойства salary\r",
							"console.log(req_data)\r",
							"console.log(\"REQUEST SALARY HAS AMOUNT \" + req_start_salary + \" \"+ typeof(req_start_salary))\r",
							"var req_age = +req_data.age\r",
							"console.log(\"REQUEST AGE IS  \" + req_age + \" \"+ typeof(req_age))\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"//в тесте использован to.have.property, так как start_qa_salary -это и есть свойство\r",
							"\r",
							"pm.test(\"Response contains parameter start_qa_salary \", () => {\r",
							"pm.expect(response_Data).to.have.property(\"start_qa_salary\")\r",
							"console.log(\"Response contains parameter start_qa_salary,\" + \"value is \"+ response_Data.start_qa_salary )\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Response contains parameter qa_salary_after_6_months\", () => {\r",
							"pm.expect(response_Data).to.have.property(\"qa_salary_after_6_months\")\r",
							"console.log(\"Response contains parameter qa_salary_after_6_months,\" + \"value is \"+ response_Data.qa_salary_after_6_months )\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Response contains parameter qa_salary_after_12_months\", () => {\r",
							"pm.expect(response_Data).to.have.property(\"qa_salary_after_12_months\")\r",
							"console.log(\"Response contains parameter qa_salary_after_12_months,\" + \"value is \"+ response_Data.qa_salary_after_12_months )\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Response contains parameter qa_salary_after_1.5_year\", () => {\r",
							"pm.expect(response_Data).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"console.log(\"Response contains parameter qa_salary_after_1.5_year,\" + \"value is \" + resp_salary_15)\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test (\"Response contains parameter qa_salary_after_3.5_years\", ()=>\r",
							"{\r",
							"pm.expect(response_Data).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"console.log(\"Response contains parameter qa_salary_after_3.5_years,\" + \"value is \"+resp_salary_35)\r",
							"}\r",
							")\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Response contains parameter person\", ()=>\r",
							"{\r",
							"pm.expect(response_Data).to.have.property(\"person\")\r",
							"console.log(\"Response contains parameter person= \",response_Data.person)\r",
							"}\r",
							");\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary is equal to salary from request\", ()=>\r",
							"{\r",
							"pm.expect(response_Data.start_qa_salary).to.equal(req_start_salary)\r",
							"console.log(response_Data.start_qa_salary + \" is equal to \" + req_start_salary)\r",
							"}\r",
							");\r",
							"\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary is equal to salary from request\", ()=>\r",
							"{\r",
							"pm.expect(response_Data.qa_salary_after_6_months).to.equal(req_start_salary*2)\r",
							"console.log(response_Data.qa_salary_after_6_months + \" is equal to \" + req_start_salary*2)\r",
							"}\r",
							");\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary is equal to salary from request\", ()=>\r",
							"{\r",
							"pm.expect(response_Data.qa_salary_after_12_months).to.equal(req_start_salary*2.7)\r",
							"console.log(response_Data.qa_salary_after_12_months + \" is equal to \" + req_start_salary*2.7)\r",
							"}\r",
							");\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary is equal to salary from request\", ()=>\r",
							"{\r",
							"pm.expect(resp_salary_15).to.equal(req_start_salary*3.3)\r",
							"console.log(resp_salary_15 + \" is equal to \" + req_start_salary*3.3)\r",
							"}\r",
							");\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary is equal to salary from request\", ()=>\r",
							"{\r",
							"pm.expect(resp_salary_35).to.equal(req_start_salary*3.8)\r",
							"console.log(resp_salary_35 + \" is equal to \" + req_start_salary*3.8)\r",
							"}\r",
							");\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"//var  response_Data = pm.response.json() \r",
							"var u_name = response_Data.person.u_name[1]\r",
							"console.log(\"U_NAME = \" + u_name + typeof(u_name))\r",
							"\r",
							"pm.test(\"u_name in request is equal to salary from request\", ()=>\r",
							"{\r",
							"pm.expect(u_name).to.equal(req_start_salary)\r",
							"console.log(u_name + \" is equal to \" + req_start_salary)\r",
							"}\r",
							");\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"var u_age = response_Data.person.u_age\r",
							"console.log(\"U_AGE = \" + u_age +\" \"+ typeof(u_age))\r",
							"\r",
							"pm.test(\"u_age in request is equal to age from request\", ()=>\r",
							"{\r",
							"pm.expect(u_age).to.equal(req_age)\r",
							"console.log(u_age + \" is equal to \" + req_age)\r",
							"}\r",
							");\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"var u_salary_5years = response_Data.person.u_salary_5_years\r",
							"console.log(u_salary_5years + \" is  \" + u_salary_5years + typeof(u_salary_5years))\r",
							"\r",
							"pm.test(\"u_salary_5years in request is equal to salary*4.2 from request\", ()=>\r",
							"{\r",
							"pm.expect(u_salary_5years).to.equal(req_start_salary*4.2)\r",
							"console.log(u_salary_5years + \" is equal to \" + req_start_salary*4.2)\r",
							"}\r",
							");\r",
							"\r",
							"// // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name_variable}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age_variable}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_variable}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", () => {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}